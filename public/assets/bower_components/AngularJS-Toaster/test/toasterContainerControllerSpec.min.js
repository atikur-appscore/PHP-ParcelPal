"use strict";var rootScope,toaster,$compile;describe("toasterContainer controller",function(){beforeEach(function(){module("toaster");inject(function(c,b,a){toaster=c;rootScope=b;$compile=a})});it("should stop timer if config.mouseoverTimer is true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();expect(b.config.mouseoverTimer).toBe(true);toaster.pop({type:"info"});rootScope.$digest();expect(b.toasters[0].timeoutPromise).toBeDefined();b.stopTimer(b.toasters[0]);rootScope.$digest();expect(b.toasters[0].timeoutPromise).toBe(null)});it("should do nothing if config.mouseoverTimer is true and stopTimer is called again",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();expect(b.config.mouseoverTimer).toBe(true);toaster.pop({type:"info"});rootScope.$digest();b.stopTimer(b.toasters[0]);rootScope.$digest();expect(b.toasters[0].timeoutPromise).toBe(null);b.stopTimer(b.toasters[0]);rootScope.$digest();expect(b.toasters[0].timeoutPromise).toBe(null)});it("should not stop timer if config.mouseoverTimer is false",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': false }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();expect(b.config.mouseoverTimer).toBe(false);toaster.pop({type:"info"});rootScope.$digest();expect(b.toasters[0].timeoutPromise).toBeDefined();b.stopTimer(b.toasters[0]);rootScope.$digest();expect(b.toasters[0].timeoutPromise).toBeDefined()});it("should restart timer if config.mouseoverTimer is true and timeoutPromise is falsy",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();toaster.pop({type:"info"});rootScope.$digest();expect(b.toasters[0].timeoutPromise).toBeDefined();b.stopTimer(b.toasters[0]);expect(b.toasters[0].timeoutPromise).toBe(null);b.restartTimer(b.toasters[0]);expect(b.toasters[0].timeoutPromise).toBeDefined()});it("should not restart timer if config.mouseoverTimer is true and timeoutPromise is truthy",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();toaster.pop({type:"info"});rootScope.$digest();expect(b.toasters[0].timeoutPromise).toBeDefined();spyOn(b,"configureTimer").and.callThrough();b.restartTimer(b.toasters[0]);expect(b.toasters[0].timeoutPromise).toBeDefined();expect(b.configureTimer).not.toHaveBeenCalled()});it("should not restart timer and should remove toast if config.mouseoverTimer is not true and timeoutPromise is null",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': 2 }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();toaster.pop({type:"info"});rootScope.$digest();expect(b.config.mouseoverTimer).toBe(2);b.toasters[0].timeoutPromise=null;spyOn(b,"configureTimer").and.callThrough();spyOn(b,"removeToast").and.callThrough();b.restartTimer(b.toasters[0]);expect(b.configureTimer).not.toHaveBeenCalled();expect(b.removeToast).toHaveBeenCalled();expect(b.toasters.length).toBe(0)});it("should not restart timer or remove toast if config.mouseoverTimer is not true and timeoutPromise is not null",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': 2 }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();toaster.pop({type:"info"});rootScope.$digest();expect(b.config.mouseoverTimer).toBe(2);spyOn(b,"configureTimer").and.callThrough();spyOn(b,"removeToast").and.callThrough();b.restartTimer(b.toasters[0]);expect(b.configureTimer).not.toHaveBeenCalled();expect(b.removeToast).not.toHaveBeenCalled();expect(b.toasters.length).toBe(1)});describe("click",function(){it("should do nothing if config.tap is not true and toast.showCloseButton is not true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': false, 'close-button': false }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();spyOn(b,"removeToast").and.callThrough();toaster.pop({type:"info"});rootScope.$digest();b.click(b.toasters[0]);expect(b.toasters.length).toBe(1);expect(b.removeToast).not.toHaveBeenCalled()});it("should do nothing if config.tap is not true and toast.showCloseButton is true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': false, 'close-button': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();spyOn(b,"removeToast").and.callThrough();toaster.pop({type:"info"});rootScope.$digest();b.click(b.toasters[0]);expect(b.toasters.length).toBe(1);expect(b.removeToast).not.toHaveBeenCalled()});it("should do nothing if config.tap is not true and isCloseButton is not true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': false, 'close-button': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();spyOn(b,"removeToast").and.callThrough();toaster.pop({type:"info"});rootScope.$digest();b.click(b.toasters[0],false);expect(b.toasters.length).toBe(1);expect(b.removeToast).not.toHaveBeenCalled()});it("should remove toast if config.tap is true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();spyOn(b,"removeToast").and.callThrough();toaster.pop({type:"info"});rootScope.$digest();b.click(b.toasters[0]);expect(b.toasters.length).toBe(0);expect(b.removeToast).toHaveBeenCalled()});it("should remove toast if config.tap is true and the click handler function returns true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();spyOn(b,"removeToast").and.callThrough();toaster.pop({type:"info",clickHandler:function(c,d){return true}});rootScope.$digest();b.click(b.toasters[0]);expect(b.toasters.length).toBe(0);expect(b.removeToast).toHaveBeenCalled()});it("should not remove toast if config.tap is true and the click handler function does not return true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();spyOn(b,"removeToast").and.callThrough();toaster.pop({type:"info",clickHandler:function(c,d){}});rootScope.$digest();b.click(b.toasters[0]);expect(b.toasters.length).toBe(1);expect(b.removeToast).not.toHaveBeenCalled()});it("should remove toast if config.tap is true and the click handler exists on the parent returning true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();b.$parent.clickHandler=function(){return true};spyOn(b,"removeToast").and.callThrough();toaster.pop({type:"info",clickHandler:"clickHandler"});rootScope.$digest();b.click(b.toasters[0]);expect(b.toasters.length).toBe(0);expect(b.removeToast).toHaveBeenCalled()});it("should not remove toast if config.tap is true and the click handler exists on the parent not returning true",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();b.$parent.clickHandler=function(){};spyOn(b,"removeToast").and.callThrough();toaster.pop({type:"info",clickHandler:"clickHandler"});rootScope.$digest();b.click(b.toasters[0]);expect(b.toasters.length).toBe(1);expect(b.removeToast).not.toHaveBeenCalled()});it("should remove toast if config.tap is true and the click handler does not exist on the parent",function(){var a=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(a)(rootScope);rootScope.$digest();var b=a.scope();spyOn(b,"removeToast").and.callThrough();console.log=jasmine.createSpy("log");toaster.pop({type:"info",clickHandler:"clickHandler"});rootScope.$digest();b.click(b.toasters[0]);expect(b.toasters.length).toBe(0);expect(b.removeToast).toHaveBeenCalled();expect(console.log).toHaveBeenCalledWith("TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container.")})})});